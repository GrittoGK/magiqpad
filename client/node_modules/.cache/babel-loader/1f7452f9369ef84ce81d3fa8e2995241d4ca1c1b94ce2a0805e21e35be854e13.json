{"ast":null,"code":"(function () {\n  \"use strict\";\n\n  try {\n    if (typeof document < \"u\") {\n      var e = document.createElement(\"style\");\n      e.appendChild(document.createTextNode(\".cdx-marker{background:rgba(245,235,111,.29);padding:3px 0}\")), document.head.appendChild(e);\n    }\n  } catch (d) {\n    console.error(\"vite-plugin-css-injected-by-js\", d);\n  }\n})();\nconst o = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-width=\"2\" d=\"M11.3536 9.31802L12.7678 7.90381C13.5488 7.12276 14.8151 7.12276 15.5962 7.90381C16.3772 8.68486 16.3772 9.95119 15.5962 10.7322L14.182 12.1464M11.3536 9.31802L7.96729 12.7043C7.40889 13.2627 7.02827 13.9739 6.8734 14.7482L6.69798 15.6253C6.55804 16.325 7.17496 16.942 7.87468 16.802L8.75176 16.6266C9.52612 16.4717 10.2373 16.0911 10.7957 15.5327L14.182 12.1464M11.3536 9.31802L14.182 12.1464\"/><line x1=\"15\" x2=\"19\" y1=\"17\" y2=\"17\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/></svg>';\nclass s {\n  /**\n   * Class name for term-tag\n   *\n   * @type {string}\n   */\n  static get CSS() {\n    return \"cdx-marker\";\n  }\n  /**\n   * @param {{api: object}}  - Editor.js API\n   */\n  constructor(_ref) {\n    let {\n      api: t\n    } = _ref;\n    this.api = t, this.button = null, this.tag = \"MARK\", this.iconClasses = {\n      base: this.api.styles.inlineToolButton,\n      active: this.api.styles.inlineToolButtonActive\n    };\n  }\n  /**\n   * Specifies Tool as Inline Toolbar Tool\n   *\n   * @return {boolean}\n   */\n  static get isInline() {\n    return !0;\n  }\n  /**\n   * Create button element for Toolbar\n   *\n   * @return {HTMLElement}\n   */\n  render() {\n    return this.button = document.createElement(\"button\"), this.button.type = \"button\", this.button.classList.add(this.iconClasses.base), this.button.innerHTML = this.toolboxIcon, this.button;\n  }\n  /**\n   * Wrap/Unwrap selected fragment\n   *\n   * @param {Range} range - selected fragment\n   */\n  surround(t) {\n    if (!t) return;\n    let e = this.api.selection.findParentTag(this.tag, s.CSS);\n    e ? this.unwrap(e) : this.wrap(t);\n  }\n  /**\n   * Wrap selection with term-tag\n   *\n   * @param {Range} range - selected fragment\n   */\n  wrap(t) {\n    let e = document.createElement(this.tag);\n    e.classList.add(s.CSS), e.appendChild(t.extractContents()), t.insertNode(e), this.api.selection.expandToTag(e);\n  }\n  /**\n   * Unwrap term-tag\n   *\n   * @param {HTMLElement} termWrapper - term wrapper tag\n   */\n  unwrap(t) {\n    this.api.selection.expandToTag(t);\n    let e = window.getSelection(),\n      n = e.getRangeAt(0),\n      i = n.extractContents();\n    t.parentNode.removeChild(t), n.insertNode(i), e.removeAllRanges(), e.addRange(n);\n  }\n  /**\n   * Check and change Term's state for current selection\n   */\n  checkState() {\n    const t = this.api.selection.findParentTag(this.tag, s.CSS);\n    this.button.classList.toggle(this.iconClasses.active, !!t);\n  }\n  /**\n   * Get Tool icon's SVG\n   * @return {string}\n   */\n  get toolboxIcon() {\n    return o;\n  }\n  /**\n   * Sanitizer rule\n   * @return {{mark: {class: string}}}\n   */\n  static get sanitize() {\n    return {\n      mark: {\n        class: s.CSS\n      }\n    };\n  }\n}\nexport { s as default };","map":{"version":3,"names":["document","e","createElement","appendChild","createTextNode","head","d","console","error","o","s","CSS","constructor","_ref","api","t","button","tag","iconClasses","base","styles","inlineToolButton","active","inlineToolButtonActive","isInline","render","type","classList","add","innerHTML","toolboxIcon","surround","selection","findParentTag","unwrap","wrap","extractContents","insertNode","expandToTag","window","getSelection","n","getRangeAt","i","parentNode","removeChild","removeAllRanges","addRange","checkState","toggle","sanitize","mark","class","default"],"sources":["F:/Github/magiqpad/client/node_modules/@editorjs/marker/dist/marker.mjs"],"sourcesContent":["(function(){\"use strict\";try{if(typeof document<\"u\"){var e=document.createElement(\"style\");e.appendChild(document.createTextNode(\".cdx-marker{background:rgba(245,235,111,.29);padding:3px 0}\")),document.head.appendChild(e)}}catch(d){console.error(\"vite-plugin-css-injected-by-js\",d)}})();\nconst o = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-width=\"2\" d=\"M11.3536 9.31802L12.7678 7.90381C13.5488 7.12276 14.8151 7.12276 15.5962 7.90381C16.3772 8.68486 16.3772 9.95119 15.5962 10.7322L14.182 12.1464M11.3536 9.31802L7.96729 12.7043C7.40889 13.2627 7.02827 13.9739 6.8734 14.7482L6.69798 15.6253C6.55804 16.325 7.17496 16.942 7.87468 16.802L8.75176 16.6266C9.52612 16.4717 10.2373 16.0911 10.7957 15.5327L14.182 12.1464M11.3536 9.31802L14.182 12.1464\"/><line x1=\"15\" x2=\"19\" y1=\"17\" y2=\"17\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/></svg>';\nclass s {\n  /**\n   * Class name for term-tag\n   *\n   * @type {string}\n   */\n  static get CSS() {\n    return \"cdx-marker\";\n  }\n  /**\n   * @param {{api: object}}  - Editor.js API\n   */\n  constructor({ api: t }) {\n    this.api = t, this.button = null, this.tag = \"MARK\", this.iconClasses = {\n      base: this.api.styles.inlineToolButton,\n      active: this.api.styles.inlineToolButtonActive\n    };\n  }\n  /**\n   * Specifies Tool as Inline Toolbar Tool\n   *\n   * @return {boolean}\n   */\n  static get isInline() {\n    return !0;\n  }\n  /**\n   * Create button element for Toolbar\n   *\n   * @return {HTMLElement}\n   */\n  render() {\n    return this.button = document.createElement(\"button\"), this.button.type = \"button\", this.button.classList.add(this.iconClasses.base), this.button.innerHTML = this.toolboxIcon, this.button;\n  }\n  /**\n   * Wrap/Unwrap selected fragment\n   *\n   * @param {Range} range - selected fragment\n   */\n  surround(t) {\n    if (!t)\n      return;\n    let e = this.api.selection.findParentTag(this.tag, s.CSS);\n    e ? this.unwrap(e) : this.wrap(t);\n  }\n  /**\n   * Wrap selection with term-tag\n   *\n   * @param {Range} range - selected fragment\n   */\n  wrap(t) {\n    let e = document.createElement(this.tag);\n    e.classList.add(s.CSS), e.appendChild(t.extractContents()), t.insertNode(e), this.api.selection.expandToTag(e);\n  }\n  /**\n   * Unwrap term-tag\n   *\n   * @param {HTMLElement} termWrapper - term wrapper tag\n   */\n  unwrap(t) {\n    this.api.selection.expandToTag(t);\n    let e = window.getSelection(), n = e.getRangeAt(0), i = n.extractContents();\n    t.parentNode.removeChild(t), n.insertNode(i), e.removeAllRanges(), e.addRange(n);\n  }\n  /**\n   * Check and change Term's state for current selection\n   */\n  checkState() {\n    const t = this.api.selection.findParentTag(this.tag, s.CSS);\n    this.button.classList.toggle(this.iconClasses.active, !!t);\n  }\n  /**\n   * Get Tool icon's SVG\n   * @return {string}\n   */\n  get toolboxIcon() {\n    return o;\n  }\n  /**\n   * Sanitizer rule\n   * @return {{mark: {class: string}}}\n   */\n  static get sanitize() {\n    return {\n      mark: {\n        class: s.CSS\n      }\n    };\n  }\n}\nexport {\n  s as default\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}